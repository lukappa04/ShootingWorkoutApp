// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SWBackend.DataBase;

#nullable disable

namespace SWBackend.Migrations
{
    [DbContext(typeof(SWDbContext))]
    [Migration("20250514201957_AddAgeField")]
    partial class AddAgeField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SWBackend.Models.SignUp.Credentials.CredentialM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleCode")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("SWBackend.Models.SignUp.PersonalData.PersonalDataM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonalDatas");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.PositionM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Position_X")
                        .HasColumnType("double precision");

                    b.Property<double>("Position_Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.ShotM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Made")
                        .HasColumnType("boolean");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("SessionId");

                    b.ToTable("Shots");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkoutName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutName")
                        .IsUnique();

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutPositionM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxShot")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int?>("PositionMId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkoutMId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("PositionMId");

                    b.HasIndex("WorkoutMId");

                    b.HasIndex("WorkoutId", "PositionId")
                        .IsUnique();

                    b.ToTable("WorkoutPositions");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutSessionM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId")
                        .IsUnique();

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("SWBackend.Models.SignUp.Credentials.CredentialM", b =>
                {
                    b.HasOne("SWBackend.Models.SignUp.PersonalData.PersonalDataM", "User")
                        .WithOne()
                        .HasForeignKey("SWBackend.Models.SignUp.Credentials.CredentialM", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.ShotM", b =>
                {
                    b.HasOne("SWBackend.Models.Workout.PositionM", "WPosition")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWBackend.Models.Workout.WorkoutM", "WSession")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WPosition");

                    b.Navigation("WSession");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutM", b =>
                {
                    b.HasOne("SWBackend.Models.SignUp.PersonalData.PersonalDataM", "PDUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PDUser");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutPositionM", b =>
                {
                    b.HasOne("SWBackend.Models.Workout.PositionM", "WPosition")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWBackend.Models.Workout.PositionM", null)
                        .WithMany("UsedInWorkouts")
                        .HasForeignKey("PositionMId");

                    b.HasOne("SWBackend.Models.Workout.WorkoutM", "WorkId")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWBackend.Models.Workout.WorkoutM", null)
                        .WithMany("Positions")
                        .HasForeignKey("WorkoutMId");

                    b.Navigation("WPosition");

                    b.Navigation("WorkId");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutSessionM", b =>
                {
                    b.HasOne("SWBackend.Models.Workout.WorkoutM", "WorkId")
                        .WithOne()
                        .HasForeignKey("SWBackend.Models.Workout.WorkoutSessionM", "WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkId");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.PositionM", b =>
                {
                    b.Navigation("UsedInWorkouts");
                });

            modelBuilder.Entity("SWBackend.Models.Workout.WorkoutM", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
